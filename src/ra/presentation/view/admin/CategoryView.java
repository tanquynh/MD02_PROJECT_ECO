package ra.presentation.view.admin;

import ra.business.config.InputMethods;
import ra.business.model.Cart;
import ra.business.model.Category;
import ra.business.model.User;
import ra.business.design.CategoryDesign;
import ra.business.design.ProductDesign;
import ra.business.design.UserDesign;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import static ra.business.config.ConsoleColor.*;
import static ra.business.config.InputMethods.scanner;
import static ra.business.constant.Constant.CategoryStatus.ACTIVE;
import static ra.business.constant.Constant.Status.INACTIVE;

public class CategoryView {
    private CategoryDesign categoryDesign;
    private UserDesign userDesign;
    private ProductDesign productDesign;


    public CategoryView() {

        this.userDesign = new UserDesign();
        this.categoryDesign = new CategoryDesign();
        this.productDesign = new ProductDesign();
    }


    public void displayAdminCategory() {
        int choice;
        do {
            print(YELLOW);

            System.out.println(".-----------------------------------------------------------.");
            System.out.println("|                            ADMIN-CATEGORY                 |");
            System.out.println("|-----------------------------------------------------------|");
            System.out.println("|                     1. TH√äM M·ªöI DANH M·ª§C                  |");
            System.out.println("|                     2. DANH S√ÅCH DANH M·ª§C                 |");
            System.out.println("|                     3. T√åM KI·∫æM DANH M·ª§C THEO T√äN         |");
            System.out.println("|                     4. CH·ªàNH S·ª¨A TH√îNG TIN DANH MUC       |");
            System.out.println("|                     5. ·∫®N / HI·ªÜN DANH M·ª§C                 |");
            System.out.println("|                     6. ·∫®N / HI·ªÜN NHI·ªÄU DANH M·ª§C           |");
            System.out.println("|                     7. S·∫ÆP X·∫æP DANH M·ª§C THEO T√äN          |");
            System.out.println("|                     8. QUAY L·∫†I MENU TR∆Ø·ªöC                |");
            System.out.println("|                     0. ƒêƒÇNG XU·∫§T                          |");
            System.out.println("'-----------------------------------------------------------'");
            System.out.println("Nh·∫≠p v√†o l·ª±a ch·ªçn c·ªßa b·∫°n üß°üß° : ");
            printFinish();
            choice = InputMethods.getInteger();
            switch (choice) {
                case 1:
                    addCategory();
                    break;
                case 2:
                    displayAllCategory();
                    break;
                case 3:
                    searchCategoryByName();
                    break;
                case 4:
                    editCategory();
                    break;
                case 5:
                    hideCategory();
                    break;
                case 6:
                    hideAllCategory();
                    break;
                case 7:
                    sortByName();
                    break;
                case 8:
                    return;
                case 0:
                    new UserDesign().logout();
                    break;
                default:
                    break;

            }
        } while (true);
    }

    private void addCategory() {

        System.out.println("Nh·∫≠p s·ªë l∆∞·ª£ng danh m·ª•c c·∫ßn th√™m m·ªõi");
        int numberOfCategories = InputMethods.getInteger();
        if (numberOfCategories < 0) {
            printlnError("S·ªë l∆∞·ª£ng danh m·ª•c th√™m m·ªõi ph·∫£i l·ªõn h∆°n 0) ");
            return;
        }
        for (int i = 0; i < numberOfCategories; i++) {

            System.out.println("Danh muc th·ª© " + (i + 1));
            Category category = new Category();
            // Nh·∫≠p t√™n danh m·ª•c ki·ªÉm tra t√™n danh m·ª•c ƒë√£ t·ªìn t·∫°i ch∆∞a

            while (true) {
                List<Category> categories = categoryDesign.findAll();
                System.out.println("Nh·∫≠p t√™n danh m·ª•c");
                String categoryName = InputMethods.getString();
                if (categories.isEmpty()) {
                    category.setCategoryName(categoryName);
                    break;
                }
                boolean isNameExists = false;
//                for (Category ca : categories) {
//                    if (ca.getCategoryName().equalsIgnoreCase(categoryName)) {
//                        isNameExists = true;
//                        printlnError("T√™n danh m·ª•c ƒë√£ t·ªìn t·∫°i, m·ªùi nh·∫≠p l·∫°i");
//                        break;
//
//                    }
//                }
//                if (!isNameExists) {
//                    category.setCategoryName(categoryName);
//                    break;
//                }
                Optional<Category> ca = categories.stream()
                        .filter(t -> t.getCategoryName().equalsIgnoreCase(categoryName))
                        .findFirst();
                if (ca.isPresent()) {
                    printlnError("T√™n danh m·ª•c ƒë√£ t·ªìn t·∫°i, m·ªùi nh·∫≠p l·∫°i");
                } else {
                    category.setCategoryName(categoryName);
                    break;
                }

            }
            System.out.println("Nh·∫≠p m√¥ t·∫£ danh m·ª•c");
            String categoryDes = InputMethods.getString();
            category.setCategoryDes(categoryDes);
            category.setId(categoryDesign.autoId());
            categoryDesign.save(category);
        }
    }


    private void displayAllCategory() {
        List<Category> categories = categoryDesign.findAll();
        if (categories.isEmpty()) {
            System.err.println("Danh s√°ch Category r·ªóng");
        } else {
            print(BLUE);
            System.out.println("\n                    DANH S√ÅCH CATEGORY                 ");
            System.out.println("|-------------------------------------------------------------|");
            System.out.println("|" + "  ID  |       NAME        |      DESCRIPTION     |   STATUS " + " |");
            System.out.println("|-------------------------------------------------------------|");

            for (Category category : categories) {
                System.out.printf("|%-5d | %-17s | %-20s | %-9s |%n",
                        category.getId(), category.getCategoryName(), category.getCategoryDes(), (category.isCategoryStatus() ? "ƒêANG B√ÅN" : "T·∫†M D·ª™NG"));
            }
            System.out.println("|-------------------------------------------------------------|");
            printFinish();
        }
    }

    private void searchCategoryByName() {
        List<Category> categoryList = categoryDesign.findAll();
//        List<Category> categories = new ArrayList<>();
        System.out.println("Nh·∫≠p t√™n danh m·ª•c c·∫ßn t√¨m ki·∫øm");
        String searchName = InputMethods.getString();
//        for (Category ca : categoryList) {
//            if (ca.getCategoryName().toLowerCase().contains(searchName.toLowerCase())) {
//                categories.add(ca);
//            }
//        }
        // D√πng stream
        List<Category> categories = categoryList.stream()
                .filter(t -> t.getCategoryName().toLowerCase().contains(searchName.toLowerCase()))
                .collect(Collectors.toList());
        //----------------
        if (categories.isEmpty()) {
            printlnError("Kh√¥ng t√¨m th·∫•y danh m·ª•c ph√π h·ª£p");
        } else {
            print(BLUE);
            System.out.println("\n                    DANH S√ÅCH CATEGORY                 ");
            System.out.println("|-------------------------------------------------------------|");
            System.out.println("|" + "  ID  |       NAME        |      DESCRIPTION     |   STATUS " + " |");
            System.out.println("|-------------------------------------------------------------|");

            for (Category category : categories) {
                System.out.printf("|%-5d | %-17s | %-20s | %-9s |%n",
                        category.getId(), category.getCategoryName(), category.getCategoryDes(), (category.isCategoryStatus() ? "ƒêANG B√ÅN" : "T·∫†M D·ª™NG"));
            }
            System.out.println("|-------------------------------------------------------------|");


            printFinish();
        }
    }

    private void editCategory() {
        List<Category> categoryList = categoryDesign.findAll();
        displayAllCategory();
        if (categoryList.isEmpty()) {
            return;
        }
        System.out.println("Nh·∫≠p ID c·ªßa danh m·ª•c c·∫ßn ch·ªânh s·ª≠a:");
        int choice = InputMethods.getInteger();
        Category categoryToEdit = categoryDesign.findById(choice);
        if (categoryToEdit == null) {
            printlnError("ID kh√¥ng h·ª£p l·ªá");
        } else {
            System.out.println("Nh·∫≠p t√™n danh m·ª•c m·ªõi (Nh·∫•n Enter ƒë·ªÉ b·ªè qua):");
            String newNameCate = InputMethods.getInput();
            boolean canExit = true;
            if (!newNameCate.trim().isEmpty()) {
                boolean isDuplicate;
                do {
                    isDuplicate = false;
                    for (Category ca : categoryList) {
                        if (ca.getCategoryName().equalsIgnoreCase(newNameCate)) {
                            printlnError("T√™n danh m·ª•c ƒë√£ t·ªìn t·∫°i. Vui l√≤ng nh·∫≠p t√™n kh√°c:");
                            newNameCate = InputMethods.getInput();
                            isDuplicate = true;
                            break;
                        }
                    }
                } while (isDuplicate);
                categoryToEdit.setCategoryName(newNameCate);
            }
            System.out.println("Nh·∫≠p m√¥ t·∫£ danh m·ª•c m·ªõi (Nh·∫•n Enter ƒë·ªÉ b·ªè qua):");
            String newDes = InputMethods.getInput();
            if (!newDes.trim().isEmpty()) {
                categoryToEdit.setCategoryDes(newDes);
            }
            categoryDesign.save(categoryToEdit);
        }
    }

    private void hideCategory() {
        List<User> users = userDesign.findAll();
        boolean isChange = false;
        displayAllCategory();
        System.out.println("H√£y nh·∫≠p id Category b·∫°n mu·ªën thay ƒë·ªïi tr·∫°ng th√°i:");
        int id = InputMethods.getInteger();
        Category category = categoryDesign.findById(id);
        if(category == null) {
            printlnError("Kh√¥ng t√¨m th·∫•y category b·∫°n mu·ªën ƒë·ªïi tr·∫°ng th√°i !!");
        } else {
            for (User user : users
            ) {
                for (Cart cart : user.getCart()) {
                    if (cart.getProduct().getCategory().getId().equals(id)) {
                        isChange = true;
                    }
                }
            }
            if (isChange) {
                printlnError("S·∫£n ph·∫©m c√≥ trong gi·ªè h√†ng, n√™n kh√¥ng th·ªÉ ·∫©n Category");
            } else {
                category.setCategoryStatus((category.isCategoryStatus() == ACTIVE ? INACTIVE: ACTIVE));
               printlnSuccess("Thay ƒë·ªïi tr·∫°ng th√°i th√†nh c√¥ng!");
            }
            categoryDesign.save(category);
        }
    }
    private void hideAllCategory() {
        List<Category> categories = categoryDesign.findAll();
        List<User> users = userDesign.findAll();
        System.out.println("Nh·∫≠p danh s√°ch m√£ danh m·ª•c c·∫ßn ·∫©n/hi·ªán (c√°ch nhau b·∫±ng d·∫•u ph·∫©y):");
        String inputIds = scanner().nextLine();

        // T√°ch danh s√°ch m√£ danh m·ª•c th√†nh m·∫£ng c√°c ID
        String[] idStrings = inputIds.split(",");
        boolean anyChanges = false;

        for (String idString : idStrings) {
            try {
                int idCategory = Integer.parseInt(idString);
                Category category = categoryDesign.findById(idCategory);

                if (category == null) {
                    System.err.println("ID " + idCategory + " kh√¥ng t·ªìn t·∫°i.");

                } else {
                    boolean isChange = false;
                    for (User user : users) {
                        for (Cart cart : user.getCart()) {
                            if (cart.getProduct().getCategory().getId().equals(idCategory)) {
                                isChange = true;
                                break;  // Tho√°t kh·ªèi v√≤ng l·∫∑p khi s·∫£n ph·∫©m ƒë∆∞·ª£c t√¨m th·∫•y trong gi·ªè h√†ng
                            }
                        }
                        if (isChange) {
                            System.err.println("ID s·∫£n ph·∫©m: " + idCategory + " c√≥ trong gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng " + user.getUserName() + ", n√™n kh√¥ng th·ªÉ ·∫©n s·∫£n ph·∫©m");
                            break;  // Tho√°t kh·ªèi v√≤ng l·∫∑p ng∆∞·ªùi d√πng khi s·∫£n ph·∫©m ƒë∆∞·ª£c t√¨m th·∫•y trong gi·ªè h√†ng
                        }
                    }
                    if (!isChange) {
                        category.setCategoryStatus((category.isCategoryStatus() == ACTIVE ? INACTIVE: ACTIVE));
                        categoryDesign.save(category);
                        anyChanges = true;
                        System.out.println("ID danh m·ª•c: " + idCategory + " Thay ƒë·ªïi tr·∫°ng th√°i th√†nh c√¥ng!");
                    }

                }
            } catch (NumberFormatException e) {
                System.err.println("L·ªói: " + idString + " kh√¥ng ph·∫£i l√† m·ªôt s·ªë nguy√™n h·ª£p l·ªá.");
            }
        }

        if (anyChanges) {
            printlnSuccess("Thay ƒë·ªïi tr·∫°ng th√°i th√†nh c√¥ng!");
            // L∆∞u tr·∫°ng th√°i c·ªßa danh m·ª•c sau khi thay ƒë·ªïi

        }
    }
    private void sortByName() {
        List<Category> categoryList = categoryDesign.sortByName();
        print(BLUE);
        System.out.println("\n                    DANH S√ÅCH DANH M·ª§C THEO T√äN               ");
        System.out.println("|-------------------------------------------------------------|");
        System.out.println("|" + "  ID  |       NAME        |      DESCRIPTION     |   STATUS " + " |");
        System.out.println("|-------------------------------------------------------------|");

        for (Category category : categoryList) {
            System.out.printf("|%-5d | %-17s | %-20s | %-9s |%n",
                    category.getId(), category.getCategoryName(), category.getCategoryDes(), (category.isCategoryStatus() ? "ƒêANG B√ÅN" : "T·∫†M D·ª™NG"));
        }
        System.out.println("|-------------------------------------------------------------|");
        printFinish();
    }
}

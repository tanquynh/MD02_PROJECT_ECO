package ra.view.admin;

import ra.config.InputMethods;
import ra.model.Cart;
import ra.model.Category;
import ra.model.Product;
import ra.model.User;
import ra.service.CategoryService;
import ra.service.ProductService;
import ra.service.UserService;

import java.util.List;
import java.util.stream.Collectors;


import static ra.config.ConsoleColor.*;
import static ra.config.InputMethods.*;
import static ra.constant.Constant.ProductStatus.HIDE;
import static ra.constant.Constant.ProductStatus.UNHIDE;
import static ra.constant.Until.formatCurrency;

public class ProductView {
    private UserService userService;
    private CategoryService categoryService;
    private ProductService productService;


    public ProductView() {
        this.userService = new UserService();
        this.categoryService = new CategoryService();
        this.productService = new ProductService();
    }

    public void displayMenuAdminMenuProduct() {
        int choice;
        do {

            print(BLUE);

            System.out.println(".--------------------------------------------------------.");
            System.out.println("| WELCOME ADMIN :                                          ");
            System.out.println("|--------------------------------------------------------|");
            System.out.println("|                     1. TH√äM M·ªöI S·∫¢N PH·∫®M               |");
            System.out.println("|                     2. HI·ªÇN TH·ªä DANH S√ÅCH S·∫¢N PH·∫®M     |");
            System.out.println("|                     3. CH·ªàNH S·ª¨A TH√îNG TIN S·∫¢N PH·∫®M    |");
            System.out.println("|                     4. ·∫®N / HI·ªÜN S·∫¢N PH·∫®M              |");
            System.out.println("|                     5. ·∫®N / HI·ªÜN NHI·ªÄU S·∫¢N PH·∫®M        |");
            System.out.println("|                     6. T√åM KI·∫æM S·∫¢N PH·∫®M               |");
            System.out.println("|                     7. S·∫ÆP X·∫æP S·∫¢N PH·∫®M THEO GI√Å       |");
            System.out.println("|                     8. S·∫ÆP X·∫æP S·∫¢N PH·∫®M THEO T√äN       |");
            System.out.println("|                     9. L·ªåC S·∫¢N PH·∫®M THEO TRANG TH√ÅI    |");
            System.out.println("|                     10. QUAY L·∫†I MENNU TR∆Ø·ªöC           |");
            System.out.println("|                     0. ƒêƒÇNG XU·∫§T                       |");
            System.out.println("'--------------------------------------------------------'\n");

            System.out.println("Nh·∫≠p v√†o l·ª±a ch·ªçn c·ªßa b·∫°n üß°üß°: ");
            printFinish();

            choice = getInteger();
            switch (choice) {
                case 1:
                    addProduct();
                    break;
                case 2:
                    List<Product> productList = productService.findAll();
                    displayProducts(productList);
                    break;
                case 3:
                    editProduct();
                    break;
                case 4:
                    hideProduct();
                    break;
                case 5:
                    hideAllProduct();
                    break;
                case 6:
                    searchProductByName();
                    break;
                case 7:
                    sortByPrice();
                    break;
                case 8:
                    sortByName();
                    break;
                case 9:
                    fitterByStatus();
                    break;
                case 10:
                    return;
                case 0:
                    break;
                default:
                    break;
            }

        } while (choice != 10);
    }


    private void addProduct() {
        System.out.println("Nh·∫≠p s·ªë s·∫£n ph·∫©m c·∫ßn th√™m m·ªõi:");
        int numberOfProducts = getInteger();

        if (numberOfProducts <= 0) {
            System.err.println("S·ªë s·∫£n ph·∫©m ph·∫£i l·ªõn h∆°n 0");
            return; // Tho√°t ngay khi s·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá
        }

        for (int i = 0; i < numberOfProducts; i++) {
            List<Product> products = productService.findAll();
            System.out.println("S·∫£n ph·∫©m th·ª© " + (i + 1));
            Product product = new Product();

            // Nh·∫≠p t√™n s·∫£n ph·∫©m v√† ki·ªÉm tra xem t√™n ƒë√£ t·ªìn t·∫°i ch∆∞a
            while (true) {
                System.out.println("Nh·∫≠p t√™n s·∫£n ph·∫©m:");
                String productName = getString();
                boolean isNameExists = false;

                for (Product pro : products) {
                    if (pro.getProductName().equalsIgnoreCase(productName)) {
                        isNameExists = true;
                        System.err.println("T√™n s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i, m·ªùi nh·∫≠p t√™n m·ªõi.");
                        break;
                    }
                }

                if (!isNameExists) {
                    product.setProductName(productName);
                    break; // K·∫øt th√∫c v√≤ng l·∫∑p khi t√™n h·ª£p l·ªá v√† kh√¥ng tr√πng l·∫∑p
                }
            }

            // Nh·∫≠p gi√° s·∫£n ph·∫©m
            System.out.println("Nh·∫≠p gi√° s·∫£n ph·∫©m:");
            double price = InputMethods.getDouble();
            product.setPrice(price);

            System.out.println("Nh·∫≠p m√¥ t·∫£ s·∫£n ph·∫©m:");
            String productDes = getString();
            product.setProductDes(productDes);

            // Nh·∫≠p s·ªë l∆∞·ª£ng
            System.out.println("Nh·∫≠p s·ªë l∆∞·ª£ng:");
            int quantity = getInteger();
            product.setQuantity(quantity);

            // Hi·ªÉn th·ªã danh s√°ch danh m·ª•c
            List<Category> categories = categoryService.findAll();
            if (categories.isEmpty()) {
                printlnError("Danh s√°ch danh m·ª•c r·ªóng. Vui l√≤ng th√™m danh m·ª•c tr∆∞·ªõc!!");
                return; // Tho√°t n·∫øu kh√¥ng c√≥ danh m·ª•c
            }

            print(GREEN);
            System.out.println("\n                    DANH S√ÅCH CATEGORY                 ");
            System.out.println("|-------------------------------------------------------------|");
            System.out.println("|" + "  ID  |       NAME        |      DESCRIPTION     |   STATUS " + " |");
            System.out.println("|-------------------------------------------------------------|");

            for (Category category : categories) {
                System.out.printf("|%-5d | %-17s | %-20s | %-9s |%n",
                        category.getId(), category.getCategoryName(), category.getCategoryDes(), (category.isCategoryStatus() ? "ƒêANG B√ÅN" : "T·∫†M D·ª™NG"));
            }
            System.out.println("|-------------------------------------------------------------|");
            printFinish();
//            System.out.println("Nh·∫≠p id catagory :");

            while (true) {
                System.out.println("Nh·∫≠p id danh m·ª•c s·∫£n ph·∫©m:");
                int categoryId = getInteger();
                Category selectedCategory = null;

                // T√¨m danh m·ª•c ƒë∆∞·ª£c ch·ªçn b·ªüi ng∆∞·ªùi d√πng
                for (Category category : categories) {
                    if (category.getId().equals(categoryId)) {
                        selectedCategory = category;
                        break;
                    }
                }

                if (selectedCategory != null) {
                    product.setCategory(selectedCategory);
                    product.setProductStatus(UNHIDE);
                    product.setId(productService.autoId());
                    productService.save(product);
                    System.out.println("T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng");
                    break; // K·∫øt th√∫c v√≤ng l·∫∑p sau khi s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c t·∫°o
                } else {
                    System.out.println("Id danh m·ª•c kh√¥ng t·ªìn t·∫°i, m·ªùi nh·∫≠p l·∫°i");
                }
            }
        }
    }

    private void displayProducts(List<Product> productList) {
        if (productList.isEmpty()) {
            System.err.println("Danh s√°ch s·∫£n ph·∫©m tr·ªëng!!!");
        } else {
            print(GREEN);
            System.out.println("                                        DANH S√ÅCH PRODUCT            ");
            System.out.println("|-----------------------------------------------------------------------------------------------------|");
            System.out.println("|" + "  ID  |       NAME        |      DESCRIPTION     |   STOCK  |      PRICE    |   CATEGORY  |  STATUS " + " |");
            System.out.println("|-----------------------------------------------------------------------------------------------------|");

            for (Product product : productList) {
                System.out.printf("|%-5d | %-17s | %-20s | %-8s| %-14s| %-12s| %-9s |%n",
                        product.getId(), product.getProductName(), product.getProductDes(), product.getStock(), formatCurrency(product.getPrice()), product.getCategory().getCategoryName(), (product.isProductStatus() ? "ƒêANG B√ÅN" : "T·∫†M D·ª™NG"));
            }
            System.out.println("|-----------------------------------------------------------------------------------------------------|");
            printFinish();
        }
    }

    private void editProduct() {
        System.out.println("Nh·∫≠p ID s·∫£n ph·∫©m c·∫ßn s·ª≠a: ");
        int id = getInteger();
        List<Product> products = productService.findAll();
        int index = -1; // Kh·ªüi t·∫°o index b·∫±ng -1 ƒë·ªÉ x√°c ƒë·ªãnh xem s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i hay kh√¥ng

        for (int i = 0; i < products.size(); i++) {
            if (products.get(i).getId().equals(id)) {
                index = i;
                break; // Tho√°t v√≤ng l·∫∑p khi t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID t∆∞∆°ng ·ª©ng
            }
        }

        if (index != -1) {
            Product productToEdit = products.get(index);
            boolean isExit = false;

            while (true) {
                System.out.println("Nh·∫≠p t√™n s·∫£n ph·∫©m m·ªõi (Enter ƒë·ªÉ b·ªè qua):");
                String productName = scanner().nextLine();
                if (!productName.trim().isEmpty()) {
                    boolean isNameExists = false;

                    for (Product pro : products) {
                        if (!pro.getId().equals(id) && pro.getProductName().equalsIgnoreCase(productName)) {
                            isNameExists = true;
                            System.err.println("T√™n s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i, m·ªùi nh·∫≠p t√™n m·ªõi.");
                            break;
                        }
                    }

                    if (!isNameExists) {
                        productToEdit.setProductName(productName);
                        break; // K·∫øt th√∫c v√≤ng l·∫∑p khi t√™n h·ª£p l·ªá v√† kh√¥ng tr√πng l·∫∑p
                    }
                } else {
                    break;
                }
            }

            // Nh·∫≠p gi√° s·∫£n ph·∫©m
            System.out.println("Nh·∫≠p gi√° s·∫£n ph·∫©m (Enter ƒë·ªÉ b·ªè qua):");
            while (true) {
                String priceInput = scanner().nextLine();
                if (priceInput.trim().isEmpty()) {
                    break;
                }
                try {
                    double price = Double.parseDouble(priceInput);
                    if (price >= 0) {
                        productToEdit.setPrice(price);
                        break;
                    } else {
                        System.err.println("Gi√° s·∫£n ph·∫©m ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 0.");
                    }
                } catch (NumberFormatException e) {
                    System.err.println("L·ªói: Gi√° s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá.");
                }
            }

            System.out.println("Nh·∫≠p m√¥ t·∫£ s·∫£n ph·∫©m (Enter ƒë·ªÉ b·ªè qua):");
            while (true) {
                String productDes = scanner().nextLine();
                if (productDes.isEmpty()) {
                    break;
                } else {
                    productToEdit.setProductDes(productDes);
                    break;
                }
            }


            // Nh·∫≠p s·ªë l∆∞·ª£ng
            System.out.println("Nh·∫≠p s·ªë l∆∞·ª£ng (Enter ƒë·ªÉ b·ªè qua):");
            while (true) {
                String stockInput = scanner().nextLine();
                if (stockInput.trim().isEmpty()) {
                    break;
                }
                try {
                    int stock = Integer.parseInt(stockInput);
                    if (stock >= 0) {
                        productToEdit.setStock(stock);
                        break;
                    } else {
                        System.err.println("S·ªë l∆∞·ª£ng s·∫£n ph·∫©m ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 0.");
                    }
                } catch (NumberFormatException e) {
                    System.err.println("L·ªói: S·ªë l∆∞·ª£ng s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá.");
                }
            }

            System.out.println("Danh s√°ch danh m·ª•c:");
            List<Category> categories = categoryService.findAll();

            print(GREEN);
            System.out.println("\n                    DANH S√ÅCH CATEGORY                 ");
            System.out.println("|-------------------------------------------------------------|");
            System.out.println("|" + "  ID  |       NAME        |      DESCRIPTION     |   STATUS " + " |");
            System.out.println("|-------------------------------------------------------------|");

            for (Category category : categories) {
                System.out.printf("|%-5d | %-17s | %-20s | %-9s |%n",
                        category.getId(), category.getCategoryName(), category.getCategoryDes(), (category.isCategoryStatus() ? "ƒêANG B√ÅN" : "T·∫†M D·ª™NG"));
            }
            System.out.println("|-------------------------------------------------------------|");
            printFinish();


            System.out.println("Nh·∫≠p ID danh m·ª•c m·ªõi (Enter ƒë·ªÉ b·ªè qua):");
            while (!isExit) {
                String st = scanner().nextLine();
                if (st.isEmpty()) {
                    break; // Ng∆∞·ªùi d√πng b·ªè qua vi·ªác nh·∫≠p danh m·ª•c m·ªõi
                } else if (st.matches("\\d+")) { // Ki·ªÉm tra xem chu·ªói ch·ªâ ch·ª©a ch·ªØ s·ªë
                    int newCategoryId = Integer.parseInt(st);
                    Category newCategory = categoryService.findById(newCategoryId);
                    if (newCategory != null) {


                        productToEdit.setCategory(newCategory);
                        isExit = true; // Tho√°t kh·ªèi v√≤ng l·∫∑p sau khi nh·∫≠p th√†nh c√¥ng ID danh m·ª•c
                    } else {
                        System.err.println("Danh m·ª•c kh√¥ng t·ªìn t·∫°i. M·ªùi nh·∫≠p l·∫°i.");
                    }
                } else {
                    System.err.println("H√£y nh·∫≠p m·ªôt s·ªë nguy√™n h·ª£p l·ªá.");
                }
            }

            productService.save(productToEdit); // C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m
            System.out.println("S·ª≠a s·∫£n ph·∫©m th√†nh c√¥ng");


            List<User> users = userService.findAll();
            for (User user : users
            ) {
                for (Cart cart : user.getCart()
                ) {
                    if ((int) cart.getProduct().getId() == id) {
                        cart.setProduct(productToEdit);
                    }
                }
            }
            for (User user : users
            ) {
                userService.save(user);
            }

        } else {
            System.err.println("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m c·∫ßn s·ª≠a !!!");
        }
    }

    private void hideProduct() {
        List<User> users = userService.findAll();
        boolean isChange = false;

        System.out.println("H√£y nh·∫≠p id s·∫£n ph·∫©m b·∫°n mu·ªën thay ƒë·ªïi tr·∫°ng th√°i:");
        int idProduct = getInteger();
        Product product = productService.findById(idProduct);
        if (product == null) {
            printlnError("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m b·∫°n mu·ªën ƒë·ªïi tr·∫°ng th√°i !!");
        } else {
            for (User user : users
            ) {
                for (Cart cart : user.getCart()) {
                    if (cart.getProduct().getId().equals(idProduct)) {
                        isChange = true;
                    }
                }
            }
            if (isChange) {
                printlnError("S·∫£n ph·∫©m c√≥ trong gi·ªè h√†ng, n√™n kh√¥ng th·ªÉ ·∫©n s·∫£n ph·∫©m");

            } else {
                product.setProductStatus(product.isProductStatus() == HIDE ? UNHIDE : HIDE);
                productService.save(product);
                printlnSuccess("Thay ƒë·ªïi tr·∫°ng th√°i th√†nh c√¥ng!");
            }

        }
    }

    private void hideAllProduct() {
        List<User> users = userService.findAll();
        System.out.println("Nh·∫≠p danh s√°ch m√£ s·∫£n ph·∫©m c·∫ßn ·∫©n/hi·ªán (c√°ch nhau b·∫±ng d·∫•u ph·∫©y):");
        String inputIds = scanner().nextLine();
        // T√°ch danh s√°ch m√£ s·∫£n ph·∫©m th√†nh m·∫£ng c√°c ID
        String[] idStrings = inputIds.split(",");
        boolean anyChanges = false;

        for (String idString : idStrings) {
            try {
                int idProduct = Integer.parseInt(idString);
                Product product = productService.findById(idProduct);

                if (product == null) {
                    System.err.println("ID " + idProduct + " kh√¥ng t·ªìn t·∫°i.");
                } else {
                    boolean isChange = false;
                    for (User user : users) {
                        for (Cart cart : user.getCart()) {
                            if (cart.getProduct().getId().equals(idProduct)) {
                                isChange = true;
                                break;  // Tho√°t kh·ªèi v√≤ng l·∫∑p khi s·∫£n ph·∫©m ƒë∆∞·ª£c t√¨m th·∫•y trong gi·ªè h√†ng
                            }
                        }
                        if (isChange) {
//                            System.err.println("ID s·∫£n ph·∫©m: " + idProduct + " c√≥ trong gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng " + user.getUsername() + ", n√™n kh√¥ng th·ªÉ ·∫©n s·∫£n ph·∫©m");
                            break;  // Tho√°t kh·ªèi v√≤ng l·∫∑p ng∆∞·ªùi d√πng khi s·∫£n ph·∫©m ƒë∆∞·ª£c t√¨m th·∫•y trong gi·ªè h√†ng
                        }
                    }
                    if (!isChange) {
                        product.setProductStatus(product.isProductStatus() == HIDE ? UNHIDE : HIDE);
                        productService.save(product);
                        anyChanges = true;
                        System.out.println("ID s·∫£n ph·∫©m: " + idProduct + " Thay ƒë·ªïi tr·∫°ng th√°i th√†nh c√¥ng!");
                    }
                }
            } catch (NumberFormatException e) {
                System.err.println("L·ªói: " + idString + " kh√¥ng ph·∫£i l√† m·ªôt s·ªë nguy√™n h·ª£p l·ªá.");
            }
        }

//        if (anyChanges) {
//            System.out.println("C√°c thay ƒë·ªïi tr·∫°ng th√°i s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng!");
//        }
    }

    private void searchProductByName() {
        List<Product> products = productService.getSearchProduct();
        if (products.isEmpty()) {
            System.out.println("Danh s√°ch s·∫£n ph·∫©m tr·ªëng!!");

        } else {
            print(GREEN);
            System.out.println("                                        DANH S√ÅCH PRODUCT            ");
            System.out.println("|-----------------------------------------------------------------------------------------------------|");
            System.out.println("|" + "  ID  |       NAME        |      DESCRIPTION     |   STOCK  |      PRICE    |   CATEGORY  |   STATUS " + " |");
            System.out.println("|-----------------------------------------------------------------------------------------------------|");

            for (Product product : products) {
                System.out.printf("|%-5d | %-17s | %-20s | %-8s| %-14s| %-12s| %-9s |%n",
                        product.getId(), product.getProductName(), product.getProductDes(), formatCurrency(product.getPrice()), product.getCategory().getCategoryName(), (product.isProductStatus() ? "ƒêANG B√ÅN" : "T·∫†M D·ª™NG"));
            }
            System.out.println("|-----------------------------------------------------------------------------------------------------|");
            printFinish();
        }
    }
    private void sortByPrice() {
        System.out.println("L·ª±a ch·ªçn c√°ch s·∫Øp x·∫øp s·∫£n ph·∫©m theo gi√°: ");
        System.out.println(  "+---------------------------------------------------------------------------------+"  );
        System.out.println("|"  + "   1. GI√Å TƒÇNG D·∫¶N          |    2. GI√Å GI·∫¢M D·∫¶N        |    0. QUAY L·∫†I         " + "|");
        System.out.println(  "+---------------------------------------------------------------------------------+"  );
        System.out.println("Nh·∫≠p l·ª±a ch·ªçn: ");
        switch (InputMethods.getInteger()) {
            case 1:
                List<Product> productList = productService.findAll().stream().sorted((p1, p2) -> (int) -(p1.getPrice() - p2.getPrice())).collect(Collectors.toList());
                displayProducts(productList);
                break;
            case 2:
                List<Product> products = productService.findAll().stream().sorted((p1, p2) -> (int) (p1.getPrice() - p2.getPrice())).collect(Collectors.toList());
                displayProducts(products);
                break;
            case 0:
                return;
            default:
                System.out.println(RED + "Kh√¥ng c√≥ ch·ª©c nƒÉng ph√π h·ª£p, vui l√≤ng ch·ªçn l·∫°i!!!" + RESET);
                break;
        }
    }
    private void sortByName() {
        List<Product> productList = productService.getSortNameProducts();
        displayProducts(productList);

    }
    private void fitterByStatus() {
        System.out.println("L·ª±a ch·ªçn tr·∫°ng th√°i s·∫£n ph·∫©m mu·ªën l·ªçc: ");
        System.out.println( "+---------------------------------------------------------------------------------+" );
        System.out.println("|" +   "   1. C√íN H√ÄNG             |   2. H·∫æT H√ÄNG          |   0. QUAY L·∫†I              "  + "|");
        System.out.println( "+---------------------------------------------------------------------------------+" );

        System.out.println("Nh·∫≠p l·ª±a ch·ªçn: ");
        switch (InputMethods.getInteger()) {
            case 1:
                List<Product> trueProduct = productService.findAll().stream().filter(Product::isProductStatus).collect(Collectors.toList());
                displayProducts(trueProduct);
                break;
            case 2:
                List<Product> falseProduct = productService.findAll().stream().filter(product -> !product.isProductStatus()).collect(Collectors.toList());
                displayProducts(falseProduct);
                break;
            case 0:
                return;
            default:
                System.out.println(RED + "Kh√¥ng c√≥ ch·ª©c nƒÉng ph√π h·ª£p, vui l√≤ng ch·ªçn l·∫°i!!!" + RESET);
                break;
        }
    }
}

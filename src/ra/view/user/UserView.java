package ra.view.user;

import ra.config.InputMethods;
import ra.model.*;
import ra.service.*;
import ra.view.admin.MyAccount;

import java.util.*;
import java.util.stream.Collectors;

import static ra.config.ConsoleColor.*;
import static ra.config.InputMethods.getInteger;
import static ra.constant.Constant.ProductStatus.HIDE;
import static ra.constant.Constant.Status.INACTIVE;
import static ra.constant.Until.formatCurrency;


public class UserView {
    private UserService userService;
    private ProductService productService;
    private CategoryService categoryService;
    private CartService cartService;
    private OrderService orderService;
    private WishlistService wishlistService;

    public UserView() {
        this.cartService = new CartService();
        this.categoryService = new CategoryService();
        this.productService = new ProductService();
        this.userService = new UserService();
        this.orderService = new OrderService();
        this.wishlistService = new WishlistService();
    }

    public void displayUserMenu() {

        int choice;

        do {
            print(BLUE);

            System.out.println(".-------------------------------------------------------------.");
//            System.out.println("| WELCOME USER : " + userService.userActive().getUserName() + "                                        |");
            System.out.println("|-------------------------------------------------------------|");
            System.out.println("|                 1. T√åM KI·∫æM S·∫¢N PH·∫®M THEO T√äN               |");
            System.out.println("|                 2. HI·ªÇN TH·ªä S·∫¢N PH·∫®M THEO DANH M·ª§C          |");
            System.out.println("|                 3. DANH S√ÅCH S·∫¢N PH·∫®M                       |");
            System.out.println("|                 4. HI·ªÇN TH·ªä S·∫¢N PH·∫®M N·ªîI B·∫¨T                |");
            System.out.println("|                 5. S·∫ÆP X·∫æP S·∫¢N PH·∫®M THEO GI√Å                |");
            System.out.println("|                 6. TH√äM V√ÄO GI·ªé H√ÄNG                        |");
            System.out.println("|                 7. TH√äM V√ÄO DANH S√ÅCH Y√äU TH√çCH             |");
            System.out.println("|                 8. GI·ªé H√ÄNG                                 |");
            System.out.println("|                 9. MY PROFILE                               |");
            System.out.println("|                 10. NH·∫ÆN TIN                                |");
            System.out.println("|                 0. ƒêƒÇNG XU·∫§T                                |");
            System.out.println("'-------------------------------------------------------------'\n");
            printFinish();
            System.out.println("Nh·∫≠p v√†o l·ª±a ch·ªçn c·ªßa b·∫°n üß°üß°: ");
            choice = getInteger();

            switch (choice) {
                case 1:
                    searchProduct();
                    break;
                case 2:
                    showProductByCategory();
                    break;
                case 3:
                    List<Product> productList = productService.findAll();
                    displayProductList(productList);
                    break;
                case 4:
                    showOutstandingProducts();
                    break;
                case 5:
                    sortProduct();
                    break;
                case 6:
                    List<Product> products = productService.findAll();
                    addToCart(products);
                    break;
                case 7:
                    addToWishList();
                    break;
                case 8:
                    new CartView().displayMenuCart();
                    break;
                case 9:
                    new MyAccount().MyAccount();
                    break;
                case 10:
                    new MessageView().menuMessage();
                    break;
                case 0:
                    userService.logout();
                default:
                    break;
            }
        } while (choice != 5);
    }

    private void showOutstandingProducts() {
        System.out.println("L·ª±a ch·ªçn hi√™n th·ªã s·∫£n ph·∫©m theo gi√°: ");
        System.out.println("+---------------------------------------------------------------------------------+");
//        System.out.println("|" + "   1. M·ªöI NH·∫§T          |    2. MUA NHI·ªÄU        |    3. Y√äU TH√çCH        |    0. QUAY L·∫†I         " + "|");
        System.out.println("|" + "   1. M·ªöI NH·∫§T          |    2. MUA NHI·ªÄU        |                 |    0. QUAY L·∫†I         " + "|");
        System.out.println("+---------------------------------------------------------------------------------+");
        System.out.println("Nh·∫≠p l·ª±a ch·ªçn: ");
        switch (InputMethods.getInteger()) {
            case 1:
                List<Product> latestProducts = productService.findAll()
                        .stream()
                        .filter(product -> product.getCreateAt() != null)
                        .sorted(Comparator.comparing(Product::getCreateAt).reversed())
                        .limit(10)
                        .collect(Collectors.toList());
                displayProductList(latestProducts);
                break;
            case 2:


                // L·∫•y danh s√°ch 10 s·∫£n ph·∫©m c√≥ s·ªë l∆∞·ª£ng mua nhi·ªÅu nh·∫•t t·ª´ danh s√°ch ƒë∆°n h√†ng
                List<Order> orderList = orderService.findAll();

                // T·∫°o m·ªôt Map ƒë·ªÉ l∆∞u tr·ªØ th√¥ng tin v·ªÅ s·ªë l∆∞·ª£ng mua c·ªßa t·ª´ng s·∫£n ph·∫©m
                Map<Product, Integer> productQuantityMap = new HashMap<>();

                // L·∫∑p qua danh s√°ch ƒë∆°n h√†ng ƒë·ªÉ t√≠nh to√°n s·ªë l∆∞·ª£ng mua c·ªßa t·ª´ng s·∫£n ph·∫©m
                for (Order order : orderList) {
                    for (Cart cart : userService.findById(order.getIdUser()).getCart()) {
                        Product product = cart.getProduct();
                        productQuantityMap.put(product, productQuantityMap.getOrDefault(product, 0) + cart.getQuantity());
                    }
                }

                // S·∫Øp x·∫øp s·∫£n ph·∫©m theo s·ªë l∆∞·ª£ng mua gi·∫£m d·∫ßn v√† gi·ªõi h·∫°n s·ªë l∆∞·ª£ng s·∫£n ph·∫©m l√† 10
                List<Product> products = productQuantityMap.entrySet()
                        .stream()
                        .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))
                        .limit(10)
                        .map(Map.Entry::getKey)
                        .collect(Collectors.toList());

                // Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m
                displayProductList(products);

                break;
            case 3:

                break;
            case 0:
                return;
            default:
                System.out.println(RED + "Kh√¥ng c√≥ ch·ª©c nƒÉng ph√π h·ª£p, vui l√≤ng ch·ªçn l·∫°i!!!" + RESET);
                break;
        }
    }


    public List<Product> showProductByCategory() {
        List<Product> products = productService.findAll();
        List<Category> categories = categoryService.findAll();
        List<Product> findProducts = new ArrayList<>();

        if (categories.isEmpty()) {
            System.err.println("Danh s√°ch Category r·ªóng");

        } else {
            System.out.print("\033[0;32m"); // ƒê·∫∑t m√†u ch·ªØ th√†nh xanh
            System.out.println("\n                       DANH S√ÅCH CATEGORY               ");
            System.out.println("|-------------------------------------------------------------|");
            System.out.println("|" + "  ID  |       NAME        |      DESCRIPTION     |   STATUS " + " |");
            System.out.println("|-------------------------------------------------------------|");

            for (Category catalog : categories) {
                if (catalog.isCategoryStatus() != HIDE) {
                    System.out.printf("|%-5d | %-17s | %-20s | %-9s |%n",
                            catalog.getId(), catalog.getCategoryName(), catalog.getCategoryDes(), (catalog.isCategoryStatus() ? "ƒêANG B√ÅN" : "T·∫†M D·ª™NG"));
                }
            }

            System.out.println("|-------------------------------------------------------------|");
            System.out.print("\033[0m"); // ƒê·∫∑t l·∫°i m√†u ch·ªØ th√†nh m·∫∑c ƒë·ªãnh
            printFinish();
        }
        boolean categoryFound = false;
        int searchId = -1;

        while (!categoryFound) {
            System.out.println("M·ªùi b·∫°n nh·∫≠p id category:");
            searchId = getInteger();

            for (Category category : categories) {
                if (category.getId().equals(searchId)) {
                    categoryFound = true;
                    break;
                }
            }

            if (!categoryFound) {
                System.err.println("ID kh√¥ng h·ª£p l·ªá, m·ªùi nh·∫≠p l·∫°i.");
            }
        }
        for (Product product : products) {
            if (product.getCategory().getId().equals(searchId)) {
                if (product.isProductStatus() != HIDE) {
                    findProducts.add(product);
                }

            }
        }

        if (findProducts.isEmpty()) {
            System.err.println("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong danh m·ª•c n√†y.");
        } else {
            displayProductList(findProducts);
        }

        return findProducts;
    }

    public void addToCart(List<Product> products) {
        if (products.isEmpty()) {
            printlnError("Ch∆∞a c√≥ s·∫£n ph·∫©m");

        }
        // Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m

        print(GREEN);
        System.out.println("\n                                           DANH S√ÅCH PRODUCT            ");
        System.out.println("|----------------------------------------------------------------------------------------|");
        System.out.println("|" + "  ID  |       NAME        |      DESCRIPTION     |     PRICE   |  CATEGORY  |   STATUS " + " |");
        System.out.println("|----------------------------------------------------------------------------------------|");
        for (Product product : products) {
            if (product.getCategory().isCategoryStatus() != INACTIVE && product.isProductStatus() != HIDE) {
                System.out.printf("|%-5d | %-17s | %-20s | %-10s| %-11s|%-11s|%n",
                        product.getId(), product.getProductName(), product.getProductDes(), formatCurrency(product.getPrice()), product.getCategory().getCategoryName(), (product.isProductStatus() ? "ƒêANG B√ÅN" : "T·∫†M D·ª™NG"));

            }
        }
        System.out.println("|----------------------------------------------------------------------------------------|");
        printFinish();


        System.out.println("Nh·∫≠p v√†o ID s·∫£n ph·∫©m ƒë·ªÉ th√™m v√†o gi·ªè h√†ng");
        int productId;
        while (true) {
            productId = getInteger();
            Product product = productService.findById(productId);
            if (product == null || product.isProductStatus() == HIDE || product.getCategory().isCategoryStatus() == INACTIVE) {
                System.err.println("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ho·∫∑c v·ªõi ID " + productId);
            } else {
                // T√¨m th·∫•y s·∫£n ph·∫©m v√† s·∫£n ph·∫©m kh√¥ng b·ªã ·∫©n, tho√°t kh·ªèi v√≤ng l·∫∑p
                break;
            }
        }


        // T·∫°o ƒë·ªëi t∆∞·ª£ng Cart ƒë·ªÉ l∆∞u th√¥ng tin s·∫£n ph·∫©m
        Cart cart = new Cart();
        cart.setProduct(productService.findById(productId));
        cart.setCartId(cartService.autoId());

        while (true) {
            System.out.println("Nh·∫≠p v√†o s·ªë l∆∞·ª£ng mu·ªën th√™m v√†o gi·ªè h√†ng: ");
            int count = getInteger();
            if (count <= 0) {
                printlnError("Nh·∫≠p s·ªë l∆∞·ª£ng s·∫£n ph·∫©m l·ªõn h∆°n 0");
            } else if (count > productService.findById(productId).getStock()) {
                printlnError("S·ªë l∆∞·ª£ng n√†y l·ªõn h∆°n h√†ng ch√∫ng t√¥i c√≥ s·∫µn. Vui l√≤ng gi·∫£m s·ªë l∆∞·ª£ng xu·ªëng.");
            } else {
                cart.setQuantity(count);
                break;
            }
        }

        // L∆∞u ƒë·ªëi t∆∞·ª£ng Cart v√†o gi·ªè h√†ng
        cartService.save(cart);
        printlnSuccess("Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ngüéàüéà!!");
        displayUserMenu();

    }


    private void searchProduct() {

        List<Product> products = productService.getSearchProduct();
        displayProductList(products);

    }

    private void displayProductList(List<Product> productList) {
        if (productList.size() == 0) {
            System.out.println("Danh s√°ch s·∫£n ph·∫©m tr·ªëng!!!");
        } else

            print(GREEN);
        System.out.println("\n                                        DANH S√ÅCH PRODUCT            ");
        System.out.println("|----------------------------------------------------------------------------------------|");
        System.out.println("|" + "  ID  |       NAME        |      DESCRIPTION     |     PRICE   |  CATEGORY  |   STATUS " + " |");
        System.out.println("|----------------------------------------------------------------------------------------|");

        for (Product product : productList) {
            if (product.isProductStatus() != HIDE && product.getCategory().isCategoryStatus() != INACTIVE) {
                System.out.printf("|%-5d | %-17s | %-20s | %-10s| %-11s|%-11s|%n",
                        product.getId(), product.getProductName(), product.getProductDes(), formatCurrency(product.getPrice()), product.getCategory().getCategoryName(), (product.isProductStatus() ? "ƒêANG B√ÅN" : "T·∫†M D·ª™NG"));
            }
        }
        System.out.println("|----------------------------------------------------------------------------------------|");

        productDetail();
    }

    private void productDetail() {
        System.out.println("L·ª±a ch·ªçn c√°ch s·∫Øp x·∫øp s·∫£n ph·∫©m theo gi√°: ");
        System.out.println("+---------------------------------------------------------------------------------+");
        System.out.println("|" + "   1. CHI TI·∫æT S·∫¢N PH·∫®M         |    0. QUAY L·∫†I      " + "|");
        System.out.println("+---------------------------------------------------------------------------------+");
        System.out.println("Nh·∫≠p l·ª±a ch·ªçn: ");
        switch (InputMethods.getInteger()) {
            case 1:
                likeCommentWishlistAndBuy();
                break;
            case 0:
                return;
            default:
                System.out.println(RED + "Kh√¥ng c√≥ ch·ª©c nƒÉng ph√π h·ª£p, vui l√≤ng ch·ªçn l·∫°i!!!" + RESET);
                break;
        }
    }

    private void sortProduct() {
        System.out.println("L·ª±a ch·ªçn c√°ch s·∫Øp x·∫øp s·∫£n ph·∫©m theo gi√°: ");
        System.out.println("+---------------------------------------------------------------------------------+");
        System.out.println("|" + "   1. GI√Å TƒÇNG D·∫¶N          |    2. GI√Å GI·∫¢M D·∫¶N        |    0. QUAY L·∫†I         " + "|");
        System.out.println("+---------------------------------------------------------------------------------+");
        System.out.println("Nh·∫≠p l·ª±a ch·ªçn: ");
        switch (InputMethods.getInteger()) {
            case 1:
                List<Product> productList = productService.findAll().stream().sorted((p1, p2) -> (int) -(p1.getPrice() - p2.getPrice())).collect(Collectors.toList());
                displayProductList(productList);
                break;
            case 2:
                List<Product> products = productService.findAll().stream().sorted((p1, p2) -> (int) (p1.getPrice() - p2.getPrice())).collect(Collectors.toList());
                displayProductList(products);
                break;
            case 0:
                return;
            default:
                System.out.println(RED + "Kh√¥ng c√≥ ch·ª©c nƒÉng ph√π h·ª£p, vui l√≤ng ch·ªçn l·∫°i!!!" + RESET);
                break;
        }

    }

    private void likeCommentWishlistAndBuy() {
        System.out.println("Nh·∫≠p id s·∫£n ph·∫©m c·∫ßn xem chi ti·∫øt");
        int idProductDetail = InputMethods.getInteger();
        Product product = productService.findById(idProductDetail);
        if (product == null) {
            return;
        }
        List<Product> productList = new ArrayList<>();
        productList.add(product);
        displayProductList(productList);
        print(GREEN);
        System.out.println("| " + 1 + " AddToCart    |    " + 2 + " Wishlist    |     " + 3 + "  Like  {" + (new LikeView().countLikeProduct(product)) + "} |   4  Comment    |   5  Show Comment {" + (new CommentView().showComment(product)) + "}  |     6.  Quay L·∫°i   |");
        System.out.println("|----------------------------------------------------------------------------------------|");
        printFinish();
        System.out.println("Nh·∫≠p l·ª±a ch·ªçn: ");
        switch (InputMethods.getInteger()) {
            case 1:
                List<Product> products = productService.findAll();
                addToCart(products);
                break;
            case 2:
                addToWishList();
                break;
            case 3:
                new LikeView().handleLikeProduct(product);
                break;
            case 4:
                new CommentView().addNewComment(product);
                break;
            case 6:
                new CommentView().showComment(product);
                return;
            default:
                System.out.println(RED + "Kh√¥ng c√≥ ch·ª©c nƒÉng ph√π h·ª£p, vui l√≤ng ch·ªçn l·∫°i!!!" + RESET);
                break;
        }
    }

    public void addToWishList() {
        List<Product> products = productService.findAll();
        if (products.isEmpty()) {
            printlnError("Ch∆∞a c√≥ s·∫£n ph·∫©m");

        }
        // Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m

        print(GREEN);
        System.out.println("\n                                           DANH S√ÅCH PRODUCT            ");
        System.out.println("|----------------------------------------------------------------------------------------|");
        System.out.println("|" + "  ID  |       NAME        |      DESCRIPTION     |     PRICE   |  CATEGORY  |   STATUS " + " |");
        System.out.println("|----------------------------------------------------------------------------------------|");
        for (Product product : products) {
            if (product.getCategory().isCategoryStatus() != INACTIVE && product.isProductStatus() != HIDE) {
                System.out.printf("|%-5d | %-17s | %-20s | %-10s| %-11s|%-11s|%n",
                        product.getId(), product.getProductName(), product.getProductDes(), formatCurrency(product.getPrice()), product.getCategory().getCategoryName(), (product.isProductStatus() ? "ƒêANG B√ÅN" : "T·∫†M D·ª™NG"));

            }
        }
        System.out.println("|----------------------------------------------------------------------------------------|");
        printFinish();


        System.out.println("Nh·∫≠p v√†o ID s·∫£n ph·∫©m ƒë·ªÉ th√™m v√†o danh s√°ch y√™u th√≠ch");
        int productId;
        while (true) {
            productId = getInteger();
            Product product = productService.findById(productId);
            if (product == null || product.isProductStatus() == HIDE || product.getCategory().isCategoryStatus() == INACTIVE) {
                System.err.println("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ho·∫∑c v·ªõi ID " + productId);
            } else {
                // T√¨m th·∫•y s·∫£n ph·∫©m v√† s·∫£n ph·∫©m kh√¥ng b·ªã ·∫©n, tho√°t kh·ªèi v√≤ng l·∫∑p
                break;
            }
        }


        // T·∫°o ƒë·ªëi t∆∞·ª£ng Cart ƒë·ªÉ l∆∞u th√¥ng tin s·∫£n ph·∫©m
        WishList wishList = new WishList();
        wishList.setProduct(productService.findById(productId));
        wishList.setWishListId(wishlistService.autoId());
        // L∆∞u ƒë·ªëi t∆∞·ª£ng Cart v√†o gi·ªè h√†ng
        wishlistService.save(wishList);
        printlnSuccess("Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ngüéàüéà!!");
        displayUserMenu();

    }
}
